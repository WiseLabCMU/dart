function traj = gen_traj()

g0 = 9.80665;

%% Simulation parameters

% Trajectory
T = 10;
waypoints = [ ...
    0, 0, 0; ...
    0, 2, 0; ...
    2, 2, 0; ...
    2, 0, 0; ...
    0, 0, 0; ...
];
% T = .2;
% waypoints = [ ...
%     0, 0, 0; ...
%     0, .1, 0; ...
%     .1, .1, 0;
% ];
AutoPitch = false;
AutoBank = false;

% IMU params (BNO055 model)
gyro = imuSensor('accel-gyro', ...
    SampleRate = 100, ...
    Gyroscope = gyroparams( ...
        MeasurementRange = deg2rad(2000), ...
        Resolution = deg2rad(2000 / 2^15), ...
        NoiseDensity = deg2rad(0.5) / 3600^0.5, ...
        BiasInstability = deg2rad(1) / 3600, ...
        RandomWalk = deg2rad(2) / 3600^1.5 ...
    ) ...
);
accl = imuSensor('accel-gyro', ...
    SampleRate = 100, ...
    Accelerometer = accelparams( ...
        MeasurementRange = 4 * g0, ...
        Resolution = 4 * g0 / 2^13, ...
        NoiseDensity = 0.1 / 3600^0.5, ...
        BiasInstability = 4 / 3600, ...
        RandomWalk = 10 / 3600^1.5 ...
    ) ...
);

% Radar params
fc = 77e9;
bw = 4e9;
fs = 25e6;
range_max = 10;
vel_max = 50;

% Antenna params
tx_ppower = db2pow(12) * 1e-3;
tx_gain = 0;
rx_gain = 24;
rx_nf = 15;

% Scene params
wall_pos = [3; 0; 0.5];
wall_vel = [0; 0; 0];
wall_rcs = 1;

%% Generate trajectory
timestamps = linspace(0, T, size(waypoints, 1)).';
traj = waypointTrajectory(waypoints, timestamps, ...
    AutoPitch = AutoPitch, ...
    AutoBank = AutoBank ...
);

%% Generate IMU readings
t_gyro = 0 : 1/gyro.SampleRate : T - 1/gyro.SampleRate;
t_accl = 0 : 1/accl.SampleRate : T - 1/accl.SampleRate;
[~, orient_gyro, ~, acc_gyro, angVel_gyro] = traj.lookupPose(t_gyro);
[~, orient_accl, ~, acc_accl, angVel_accl] = traj.lookupPose(t_accl);
[~, gyroReading] = gyro(acc_gyro, angVel_gyro, orient_gyro);
[acclReading, ~] = accl(acc_accl, angVel_accl, orient_accl);

%% Waveform config
sweeptime = 2 * bw * range_max / (fs * c0);
sweeptime = max(sweeptime, 5.5 * range2time(range_max, c0));
sweeptime = ceil(fs * sweeptime) / fs;
waveform = phased.FMCWWaveform( ...
    SampleRate = bw, ...
    SweepTime = sweeptime, ...
    SweepBandwidth = bw ...
);
chirp_prf = 2 * speed2dop(2 * vel_max, c0 / fc);
assert(1 / chirp_prf > sweeptime);

%% Antenna config
transmitter = phased.Transmitter( ...
    PeakPower = tx_ppower, ...
    Gain = tx_gain ...
);
receiver = phased.ReceiverPreamp( ...
    Gain = rx_gain, ...
    NoiseFigure = rx_nf, ...
    SampleRate = bw ...
);

%% Scene config
channel = phased.FreeSpace( ...
    PropagationSpeed = c0, ...
    OperatingFrequency = fc, ...
    SampleRate = bw, ...
    TwoWayPropagation = true ...
);
walltarget = phased.RadarTarget( ...
    MeanRCS = wall_rcs, ...
    PropagationSpeed = c0, ...
    OperatingFrequency = fc ...
);
wallplatform = phased.Platform( ...
    InitialPosition = wall_pos, ...
    Velocity = [0; 0; 0] ...
);

%% Generate radar readings
t_radar = 0 : 1/chirp_prf : T - 1/chirp_prf;
[pos_radar, ~, vel_radar, ~, ~] = traj.lookupPose(t_radar);
xr = complex(zeros(size(t_radar, 2), sweeptime * fs));
for m = 1 : size(t_radar, 2)
    if ~mod(m, 10)
        fprintf('%d / %d\n', m, size(t_radar, 2));
    end
    tx = waveform();
    rx = transmitter(tx);
    rx = channel(rx, pos_radar(m, :).', wall_pos, vel_radar(m, :).', wall_vel);
    rx = walltarget(rx);
    rx = receiver(rx);
    rx = dechirp(rx, tx);
    rx = decimate(rx, bw / fs);
    xr(m, :) = rx;
end

%% Calculate response
rangedopresp = phased.RangeDopplerResponse( ...
    PropagationSpeed = c0, ...
    DopplerOutput = 'Speed', ...
    OperatingFrequency = fc, ...
    SampleRate = bw, ...
    RangeMethod = 'FFT', ...
    SweepSlope = bw / sweeptime, ...
    PRFSource = 'Property', ...
    PRF = chirp_prf, ...
    ReferenceRangeCentered = false ...
);

plotResponse(rangedopresp, xr.');
clim = caxis;
